#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –≤ —Ñ–∞–π–ª NFTR —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
"""

import sys
import os
from PIL import Image, ImageDraw, ImageFont

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã NFTR —Ñ–∞–π–ª–∞ ---
CMAP_OFFSET = 15664
WIDTH_TABLE_OFFSET = 16746
CGLP_OFFSET = 59
NUM_GLYPHS = 541
BYTES_PER_GLYPH_BITMAP = 25
CELL_WIDTH = 13
CELL_HEIGHT = 15

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞ ---
FONT_PATH = "fonts/PressStart2P-Regular.ttf"
FONT_SIZE_UPPER = 12  # –†–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
FONT_SIZE_LOWER = 10  # –†–∞–∑–º–µ—Ä –¥–ª—è —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ (—á—É—Ç—å –º–µ–Ω—å—à–µ)
BITMAP_WIDTH = 13
BITMAP_HEIGHT = 15

# --- –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ---
CYRILLIC_MAPPING = [
    # –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
    (32, "–ê"), (33, "–ë"), (34, "–í"), (35, "–ì"), (36, "–î"), (37, "–ï"), (38, "–Å"),
    (39, "–ñ"), (40, "–ó"), (41, "–ò"), (42, "–ô"), (43, "–ö"), (44, "–õ"), (45, "–ú"),
    (46, "–ù"), (47, "–û"), (48, "–ü"), (49, "–†"), (50, "–°"), (51, "–¢"), (52, "–£"),
    (53, "–§"), (54, "–•"), (55, "–¶"), (56, "–ß"), (57, "–®"), (58, "–©"), (59, "–™"),
    (60, "–´"), (61, "–¨"), (62, "–≠"), (63, "–Æ"), (64, "–Ø"),
    
    # –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
    (65, "–∞"), (66, "–±"), (67, "–≤"), (68, "–≥"), (69, "–¥"), (70, "–µ"), (71, "—ë"),
    (72, "–∂"), (73, "–∑"), (74, "–∏"), (75, "–π"), (76, "–∫"), (77, "–ª"), (78, "–º"),
    (79, "–Ω"), (80, "–æ"), (81, "–ø"), (82, "—Ä"), (83, "—Å"), (84, "—Ç"), (85, "—É"),
    (86, "—Ñ"), (87, "—Ö"), (88, "—Ü"), (89, "—á"), (90, "—à"), (91, "—â"), (92, "—ä"),
    (93, "—ã"), (94, "—å"), (95, "—ç"), (96, "—é"), (97, "—è")
]

def generate_char_bitmap(char, font_path, font_size, width, height):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∏—Ç–º–∞–ø —Å–∏–º–≤–æ–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –ø–∏–∫—Å–µ–ª–µ–π (0 –∏–ª–∏ 1)
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    image = Image.new('L', (width, height), color='white')
    draw = ImageDraw.Draw(image)
    
    try:
        font = ImageFont.truetype(font_path, font_size)
    except IOError:
        print(f"–û–®–ò–ë–ö–ê: –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {font_path}")
        return None, 0

    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤–ø–ª–æ—Ç–Ω—É—é –∫ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ, –æ–ø—É—â–µ–Ω–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    try:
        bbox = draw.textbbox((0, 0), char, font=font)
        text_width, text_height = bbox[2] - bbox[0], bbox[3] - bbox[1]
    except AttributeError:
        text_width, text_height = draw.textsize(char, font=font)
        
    # –í–ø–ª–æ—Ç–Ω—É—é –∫ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ (x = 0), –æ–ø—É—â–µ–Ω–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    x_pos_draw = 0  # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    y_pos_draw = (height - text_height) / 2 + 2  # –û–ø—É—â–µ–Ω–æ –Ω–∞ 2 –ø–∏–∫—Å–µ–ª—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    draw.text((x_pos_draw, y_pos_draw), char, font=font, fill='black')

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –±–∏—Ç–º–∞–ø (–æ–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ - —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
    pixels = []
    for y in range(height):
        for x in range(width):
            pixel_value = 1 if image.getpixel((x, y)) < 128 else 0
            pixels.append(pixel_value)

    # –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —à–∏—Ä–∏–Ω—ã
    min_x, max_x = width, -1
    for y in range(height):
        for x in range(width):
            if image.getpixel((x, y)) < 128:
                if x < min_x: min_x = x
                if x > max_x: max_x = x
    actual_width = (max_x - min_x + 1) if max_x != -1 else 0

    return pixels, actual_width

def pixels_to_nftr_bytes(pixels):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π –±–∏—Ç–º–∞–ø –≤ —Ñ–æ—Ä–º–∞—Ç NFTR
    """
    if len(pixels) != CELL_WIDTH * CELL_HEIGHT:
        print(f"–û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–µ—Ç—Å—è {CELL_WIDTH * CELL_HEIGHT} –ø–∏–∫—Å–µ–ª–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {len(pixels)}")
        return None

    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö 13x15
    data_pixels = [0] * (CELL_WIDTH * CELL_HEIGHT)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for display_y in range(CELL_HEIGHT):
        # –ü–µ—Ä–≤—ã–µ 5 –ø–∏–∫—Å–µ–ª–µ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ 8-12 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö display_y
        for i in range(5):
            display_x = i
            data_x = 8 + i
            data_y = display_y
            
            if display_x < CELL_WIDTH and display_y < CELL_HEIGHT:
                display_pixel = pixels[display_y * CELL_WIDTH + display_x]
                data_idx = data_y * CELL_WIDTH + data_x
                if 0 <= data_idx < len(data_pixels):
                    data_pixels[data_idx] = display_pixel
        
        # –°–ª–µ–¥—É—é—â–∏–µ 8 –ø–∏–∫—Å–µ–ª–µ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ 0-7 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö display_y+1
        if display_y < CELL_HEIGHT - 1:
            for i in range(8):
                display_x = 5 + i
                data_x = i
                data_y = display_y + 1
                
                if display_x < CELL_WIDTH and display_y < CELL_HEIGHT:
                    display_pixel = pixels[display_y * CELL_WIDTH + display_x]
                    data_idx = data_y * CELL_WIDTH + data_x
                    if 0 <= data_idx < len(data_pixels):
                        data_pixels[data_idx] = display_pixel

    # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º data_pixels –≤ –±–∞–π—Ç—ã
    bytes_data = []
    for i in range(0, len(data_pixels), 8):
        byte_val = 0
        for j in range(8):
            if i + j < len(data_pixels) and data_pixels[i + j]:
                byte_val |= (1 << (7 - j))
        bytes_data.append(byte_val)
    
    # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    while len(bytes_data) < BYTES_PER_GLYPH_BITMAP:
        bytes_data.append(0)
    
    return bytes_data[:BYTES_PER_GLYPH_BITMAP]

def preview_bitmap(pixels, char):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –±–∏—Ç–º–∞–ø–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    """
    print(f"–ü—Ä–µ–≤—å—é –±–∏—Ç–º–∞–ø–∞ –¥–ª—è '{char}':")
    print("+" + "-" * (CELL_WIDTH * 2) + "+")
    
    for y in range(CELL_HEIGHT):
        print("|", end="")
        for x in range(CELL_WIDTH):
            idx = y * CELL_WIDTH + x
            if idx < len(pixels):
                print("‚ñà‚ñà" if pixels[idx] else "  ", end="")
        print("|")
    
    print("+" + "-" * (CELL_WIDTH * 2) + "+")

def insert_single_glyph(data, glyph_index, char, font_path=FONT_PATH, show_preview=False):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç –¢–û–õ–¨–ö–û –±–∏—Ç–º–∞–ø –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –¥–∞–Ω–Ω—ã–µ NFTR
    """
    if not (0 <= glyph_index < NUM_GLYPHS):
        print(f"–û–®–ò–ë–ö–ê: –ò–Ω–¥–µ–∫—Å {glyph_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã.")
        return False

    # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
    font_size = FONT_SIZE_UPPER if char.isupper() else FONT_SIZE_LOWER

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏—Ç–º–∞–ø
    pixels, actual_width = generate_char_bitmap(char, font_path, font_size, BITMAP_WIDTH, BITMAP_HEIGHT)
    if pixels is None:
        return False

    if show_preview:
        preview_bitmap(pixels, char)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–π—Ç—ã
    bitmap_bytes = pixels_to_nftr_bytes(pixels)
    if bitmap_bytes is None:
        return False

    # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –±–∏—Ç–º–∞–ø–∞
    bitmap_addr = CGLP_OFFSET + (glyph_index * BYTES_PER_GLYPH_BITMAP)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    if bitmap_addr + BYTES_PER_GLYPH_BITMAP > len(data):
        print(f"–û–®–ò–ë–ö–ê: –ê–¥—Ä–µ—Å –±–∏—Ç–º–∞–ø–∞ ({bitmap_addr}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ñ–∞–π–ª–∞ ({len(data)})")
        return False

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –±–∏—Ç–º–∞–ø
    for i, byte_val in enumerate(bitmap_bytes):
        data[bitmap_addr + i] = byte_val

    print(f"‚úì –°–∏–º–≤–æ–ª '{char}' ‚Üí –∏–Ω–¥–µ–∫—Å {glyph_index} (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞: {actual_width}px)")
    return True

def batch_insert_cyrillic(nftr_file, font_path=FONT_PATH, start_index=None, end_index=None, preview_mode=False):
    """
    –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤—Å–µ—Ö —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –≤ —Ñ–∞–π–ª NFTR
    """
    if not os.path.exists(nftr_file):
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª '{nftr_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(nftr_file, 'rb') as f:
        data = bytearray(f.read())

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = nftr_file + '.backup'
    if not os.path.exists(backup_file):
        with open(backup_file, 'wb') as f:
            with open(nftr_file, 'rb') as orig:
                f.write(orig.read())
        print(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    mapping_to_process = CYRILLIC_MAPPING
    if start_index is not None or end_index is not None:
        start_idx = start_index if start_index is not None else CYRILLIC_MAPPING[0][0]
        end_idx = end_index if end_index is not None else CYRILLIC_MAPPING[-1][0]
        mapping_to_process = [(idx, char) for idx, char in CYRILLIC_MAPPING if start_idx <= idx <= end_idx]

    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—Å—Ç–∞–≤–∫—É {len(mapping_to_process)} —Å–∏–º–≤–æ–ª–æ–≤...")
    print(f"–®—Ä–∏—Ñ—Ç: {font_path}")
    print(f"–†–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö: {FONT_SIZE_UPPER}px, –¥–ª—è —Å—Ç—Ä–æ—á–Ω—ã—Ö: {FONT_SIZE_LOWER}px")
    print("-" * 60)

    success_count = 0
    for glyph_index, char in mapping_to_process:
        try:
            if insert_single_glyph(data, glyph_index, char, font_path, preview_mode):
                success_count += 1
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ '{char}' –≤ –∏–Ω–¥–µ–∫—Å {glyph_index}")
        except Exception as e:
            print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{char}' (–∏–Ω–¥–µ–∫—Å {glyph_index}): {e}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if success_count > 0:
        with open(nftr_file, 'wb') as f:
            f.write(data)
        
        print("-" * 60)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(mapping_to_process)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–§–∞–π–ª {nftr_file} –æ–±–Ω–æ–≤–ª–µ–Ω!")
        print(f"‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∏—Ä–∏–Ω—ã –≥–ª–∏—Ñ–æ–≤ –≤ NFTRedit.exe")
        return True
    else:
        print("‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–µ –±—ã–ª–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ.")
        return False

def main():
    if len(sys.argv) < 2:
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python {sys.argv[0]} <—Ñ–∞–π–ª.nftr> [—à—Ä–∏—Ñ—Ç] [–Ω–∞—á–∞–ª—å–Ω—ã–π_–∏–Ω–¥–µ–∫—Å] [–∫–æ–Ω–µ—á–Ω—ã–π_–∏–Ω–¥–µ–∫—Å] [--preview]")
        print(f"")
        print(f"–ü—Ä–∏–º–µ—Ä—ã:")
        print(f"  python {sys.argv[0]} tumefont-rus.nftr")
        print(f"  python {sys.argv[0]} tumefont-rus.nftr fonts/PressStart2P-Regular.ttf")
        print(f"  python {sys.argv[0]} tumefont-rus.nftr fonts/PressStart2P-Regular.ttf 32 40")
        print(f"  python {sys.argv[0]} tumefont-rus.nftr fonts/PressStart2P-Regular.ttf 32 40 --preview")
        print(f"")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"  --preview    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –∫–∞–∂–¥–æ–≥–æ –±–∏—Ç–º–∞–ø–∞")
        print(f"")
        print(f"–î–∏–∞–ø–∞–∑–æ–Ω—ã:")
        print(f"  –ó–∞–≥–ª–∞–≤–Ω—ã–µ: –∏–Ω–¥–µ–∫—Å—ã 32-64 (–ê-–Ø)")
        print(f"  –°—Ç—Ä–æ—á–Ω—ã–µ:  –∏–Ω–¥–µ–∫—Å—ã 65-97 (–∞-—è)")
        sys.exit(1)

    nftr_file = sys.argv[1]
    font_path = sys.argv[2] if len(sys.argv) > 2 and not sys.argv[2].startswith('--') and not sys.argv[2].isdigit() else FONT_PATH
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    start_index = None
    end_index = None
    preview_mode = False
    
    for i, arg in enumerate(sys.argv[2:], 2):
        if arg == '--preview':
            preview_mode = True
        elif arg.isdigit():
            if start_index is None:
                start_index = int(arg)
            elif end_index is None:
                end_index = int(arg)

    print(f"üìù –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –≤ NFTR")
    print(f"–§–∞–π–ª: {nftr_file}")
    print(f"–®—Ä–∏—Ñ—Ç: {font_path}")
    if start_index is not None:
        print(f"–î–∏–∞–ø–∞–∑–æ–Ω: {start_index}-{end_index if end_index else '–∫–æ–Ω–µ—Ü'}")
    if preview_mode:
        print("–†–µ–∂–∏–º: –ø–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é")

    success = batch_insert_cyrillic(nftr_file, font_path, start_index, end_index, preview_mode)
    
    if success:
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–∞–º–∏:")
        print(f"python nftr_glyph_viewer.py {nftr_file} 32  # –ë—É–∫–≤–∞ –ê")
        print(f"python nftr_glyph_viewer.py {nftr_file} 65  # –ë—É–∫–≤–∞ –∞")
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()